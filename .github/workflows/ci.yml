name: CI

on:
  push:
    branches-ignore:
      - 'ci/**'
      - '!ci/gha**'
      - 'dependabot/**'
  pull_request:
    branches:
      - 'master'

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  clang:
    strategy:
      fail-fast: false
      matrix:
        include:
        - version: "19"
          distro: ubuntu-24.04
          arch_flags: -Wno-unsafe-buffer-usage -Wno-switch-default
        - version: "19"
          distro: ubuntu-24.04
          arch_flags: -ffast-math -Wno-unsafe-buffer-usage -Wno-switch-default -Wno-nan-infinity-disabled
        - version: "19"
          distro: ubuntu-24.04
          arch_flags: -Wno-unsafe-buffer-usage -Wno-switch-default -O2
        - version: "19"
          distro: ubuntu-24.04-arm
          arch_flags: -Wno-unsafe-buffer-usage -Wno-switch-default
        - version: "19"
          distro: ubuntu-24.04-arm
          arch_flags: -ffast-math -Wno-unsafe-buffer-usage -Wno-switch-default -Wno-nan-infinity-disabled
        - version: "19"
          distro: ubuntu-24.04-arm
          arch_flags: -Wno-unsafe-buffer-usage -Wno-switch-default -O2
        - version: "20"
          distro: ubuntu-24.04
          arch_flags: -Wno-unsafe-buffer-usage -Wno-switch-default
        - version: "20"
          distro: ubuntu-24.04
          arch_flags: -ffast-math -Wno-unsafe-buffer-usage -Wno-switch-default -Wno-nan-infinity-disabled
        - version: "20"
          distro: ubuntu-24.04
          arch_flags: -Wno-unsafe-buffer-usage -Wno-switch-default -O2
        - version: "20"
          distro: ubuntu-24.04-arm
          arch_flags: -Wno-unsafe-buffer-usage -Wno-switch-default
        - version: "20"
          distro: ubuntu-24.04-arm
          arch_flags: -ffast-math -Wno-unsafe-buffer-usage -Wno-switch-default -Wno-nan-infinity-disabled
        - version: "20"
          distro: ubuntu-24.04-arm
          arch_flags: -Wno-unsafe-buffer-usage -Wno-switch-default -O2
    runs-on: ${{ matrix.distro }}
    env:
      CFLAGS: -march=native ${{ matrix.arch_flags }} -Wall -Weverything -Werror -fno-lax-vector-conversions
      CXXFLAGS: -march=native ${{ matrix.arch_flags }} -Wall -Weverything -Werror -fno-lax-vector-conversions
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - id: cpu
      name: CPU Information
      run: |
        cat /proc/cpuinfo
        echo "model_name=$(grep -m1 'model name' < /proc/cpuinfo || grep -m1 Features < /proc/cpuinfo | awk '-F: ' '{ print $2}' | tr '-' '_')" >> "$GITHUB_OUTPUT"
    - run: sudo apt-get update
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}-${{ matrix.version }}-${{ matrix.distro }}-${{ matrix.arch_flags }}-${{ steps.cpu.outputs.model_name }}
        evict-old-files: job
        verbose: 2
    - name: Install PPAs
      if: ${{ matrix.distro == 'ubuntu-22.04' }}
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo add-apt-repository ppa:savoury1/build-tools
        sudo add-apt-repository ppa:savoury1/display
        sudo add-apt-repository ppa:savoury1/llvm-defaults-16
    - name: Install APT Dependencies
      run: |
        sudo add-apt-repository ppa:canonical-x/x-staging
        sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
        sudo apt-get update
        sudo apt-get -y --no-install-recommends install gcovr ninja-build pipx \
          clang-${{ matrix.version }}
        pipx install meson==0.55.1
        sudo rm /usr/bin/gcc /usr/bin/g++ /usr/bin/cc /usr/bin/c++
        sudo ln -s $(command -v clang-${{ matrix.version }}) /usr/bin/cc
        sudo ln -s $(command -v clang-${{ matrix.version }}) /usr/bin/c++
    - name: add ccache to the build path
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
    - name: Configure
      run: meson setup build || (cat build/meson-logs/meson-log.txt ; false)
    - name: Build
      run: meson compile -C build --verbose
    - name: Test
      run: meson test -C build --print-errorlogs $(meson test -C build --list | grep -v emul)

